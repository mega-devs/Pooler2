"""
Django settings for root project.
Generated by 'django-admin startproject' using Django 5.1.1.
"""
import os
import environ
import sentry_sdk

from pathlib import Path
from datetime import timedelta
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent
env = environ.Env(DEBUG=(bool, False))
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-det6lii00+ryw#+d$w2el=qltumvqq(j7y16tp_obh+jl%ak4g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pooler.apps.PoolerConfig',
    'users.apps.UsersConfig',
    'files.apps.FilesConfig',
    'proxy.apps.ProxyConfig',
    'telegram.apps.TelegramConfig',
    'ufw_manager.apps.UfwManagerConfig',    
    'rest_framework',
    'rest_framework_simplejwt',
    'import_export',
    'drf_yasg',
    'corsheaders',
    'django_prometheus',
    'debug_toolbar',
    'tracking',
    'django_mailbox',
    'health_check',
    'health_check.db',
    'health_check.storage',
    'health_check.contrib.migrations',
    'health_check.contrib.celery',
    'health_check.contrib.celery_ping',
    'health_check.contrib.redis',
    'silk',
    'django_rq',
    'constance',
    'constance.backends.database',
]

MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'silk.middleware.SilkyMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'tracking.middleware.VisitorTrackingMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # For development
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'root.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'root.wsgi.application'

# Database
DATABASES = {
    "default": {
        "ENGINE": env("SQL_ENGINE"),
        "NAME": env("SQL_DATABASE"),
        "USER": env("SQL_USER"),
        "PASSWORD": env("SQL_PASSWORD"),
        "HOST": env("SQL_HOST"),
        "PORT": env("SQL_PORT"),
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# logging conf
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
}

AUTH_USER_MODEL = 'users.User'
LOGIN_URL = 'token_obtain_pair'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

APPEND_SLASH = False

UPLOAD_ROOT = os.path.join(BASE_DIR, 'uploads')

# Celery
CELERY_BROKER_URL = "redis://redis:6379/0"
CELERY_RESULT_BACKEND = "redis://redis:6379/0"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"
CELERY_ENABLE_UTC = True
CELERY_WORKER_PREFETCH_MULTIPLIER = 1  # To avoid queue overload
CELERY_TASK_ACKS_LATE = True  # Retry task on failure

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
    'USE_SESSION_AUTH': False,
    'JSON_EDITOR': True,
    'DISPLAY_OPERATION_ID': False,
    'SUPPORTED_SUBMIT_METHODS': ['get', 'post', 'put', 'delete'],
    'VALIDATOR_URL': None,
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=90),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'AUTH_HEADER_TYPES': ('Bearer',),
}

SESSION_COOKIE_AGE = 90 * 60  # 90 minutes
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# Django Debug Toolbar
INTERNAL_IPS = [
    '127.0.0.1',
]

if DEBUG:
    import socket
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS += [ip[:-1] + '1' for ip in ips]

LOG_FILES = {
    'smtp': 'app/data/temp_logs/temp_smtp.log',
    'imap': 'app/data/temp_logs/temp_imap.log', 
    'socks': 'app/data/temp_logs/socks.log',
    'url_fetch': 'app/data/temp_logs/url_fetch.log',
    'telegram_fetch': 'app/data/temp_logs/telegram_fetch.log'
}

# Tracking settings
TRACK_PAGEVIEWS = True
TRACK_IGNORE_URLS = ['/favicon.ico']
TRACK_IGNORE_USER_AGENTS = ['googlebot', 'bot', 'spider', 'crawler']
TRACK_IGNORE_STATUS_CODES = [400, 404, 403, 405, 410, 500]
TRACK_USING_GEOIP = True

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": 'redis://redis:6379/1',
    }
}

# Sentry
if env('SENTRY_DSN', default=None):
    sentry_sdk.init(
        dsn=env('SENTRY_DSN'),
        traces_sample_rate=0.2,
        environment="production",
        send_default_pii=False,
        _experiments={
            "continuous_profiling_auto_start": True,
        },
        integrations=[
            DjangoIntegration(),
        ],
    )

# Email settings
DJANGO_MAILBOX_STORE_ORIGINAL_MESSAGE = True
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env('EMAIL_PORT')  # 587
EMAIL_USE_TLS = env('EMAIL_USE_TLS')  # True
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

REDIS_URL = "redis://redis:6379"

# Silk settings
SILKY_PYTHON_PROFILER = True
SILKY_AUTHENTICATION = True  # requiring login
SILKY_AUTHORISATION = True   # authorization
SILKY_MAX_REQUEST_LOG_SIZE = 10 * 1024 * 1024
SILKY_MAX_RESPONSE_LOG_SIZE = 10 * 1024 * 1024

# Admin Panel UI settings
JAZZMIN_SETTINGS = {
    'site_title': 'Pooler 2',
    'site_header': 'Pooler 2',
    'site_brand': 'Pooler 2',
    'welcome_sign': 'Welcome to an Admin Panel',
    'copyright': 'Pooler 2',
    'search_model': 'auth.User',
    'user_avatar': 'admin.ico',

    # Top Menu #
    'topmenu_links': [
        {'name': 'Home', 'url': 'http://127.0.0.1:8000/', 'permissions': ['auth.view_user']},
        {'name': 'Support', 'url': 'https://support.example.com', 'new_window': True},
    ],

    # Side Menu #
    'show_sidebar': True,
    'navigation_expanded': True,

    'icons': {
        'auth': 'fas fa-users-cog',
        'auth.user': 'fas fa-user',
        'auth.Group': 'fas fa-users',
    },

    # Relative paths to custom CSS/JS files
    'custom_css': 'css/admin_custom.css',
    'custom_js': 'js/admin_custom.js',

    'show_ui_builder': True,

    # Theme settings
    'theme': 'darkly',  # Apply the dark theme by default
}

JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": False,
    "brand_small_text": False,
    "brand_colour": "navbar-primary",
    "accent": "accent-pink",
    "navbar": "navbar-dark",
    "no_navbar_border": False,
    "navbar_fixed": True,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": True,
    "sidebar": "sidebar-dark-success",
    "sidebar_nav_small_text": True,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": True,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,
    "theme": "darkly",
    "dark_mode_theme": "darkly",
    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "info": "btn-outline-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-outline-success"
    },
    "actions_sticky_top": False
}

RQ_QUEUES = {
    'default': {
        'HOST': 'redis',
        'PORT': 6379,
        'DB': 0,
        'DEFAULT_TIMEOUT': 360,
    },
    'high': {
        'HOST': 'redis',
        'PORT': 6379,
        'DB': 0,
    },
    'low': {
        'HOST': 'redis',
        'PORT': 6379,
        'DB': 0,
    }
}
# Constance settings
CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'

CONSTANCE_CONFIG = {
    'SITE_NAME': ('Pooler 2', 'Website name'),
    'MAINTENANCE_MODE': (False, 'Put site in maintenance mode'),
    'MAX_CONCURRENT_TASKS': (5, 'Maximum number of concurrent tasks'),
    'TELEGRAM_FETCH_INTERVAL': (300, 'Telegram fetch interval in seconds'),
    'EMAIL_FETCH_BATCH_SIZE': (100, 'Number of emails to fetch in one batch'),
    'PROXY_CHECK_TIMEOUT': (10, 'Proxy check timeout in seconds'),
}

CONSTANCE_CONFIG_FIELDSETS = {
    'General Settings': ('SITE_NAME', 'MAINTENANCE_MODE'),
    'Task Settings': ('MAX_CONCURRENT_TASKS',),
    'Fetch Settings': ('TELEGRAM_FETCH_INTERVAL', 'EMAIL_FETCH_BATCH_SIZE'),
    'Proxy Settings': ('PROXY_CHECK_TIMEOUT',),
}
