services:
  db:
    image: postgres:16
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    restart: always
    networks:
      - backend
    command: -c 'max_connections=5000'

  postgres_exporter:
    image: wrouesnel/postgres_exporter:latest
    container_name: postgres_exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    ports:
      - "9187:9187"
    networks:
      - backend
    depends_on:
      - db

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pooler_web
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
      - redis
    volumes:
      - ./uploads:/app/uploads
    networks:
      - backend
    restart: always

  redis:
    image: redis:alpine
    container_name: pooler_redis
    ports:
      - "6379:6379"
    command: redis-server --save "" --appendonly no
    restart: always
    networks:
      - backend
  celery:
    build:
      context: .
    container_name: pooler_celery
    command: celery -A root worker -B --loglevel=INFO --concurrency=4
    volumes:
      - .:/app
      - ./data/temp_logs:/app/data/temp_logs
      - ./data/full_logs:/app/data/full_logs
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - backend
    restart: always

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    networks:
      - backend

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - '3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_COOKIE_SAMESITE=none
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - backend

volumes:
  postgres_data:
  grafana_data:
  prometheus_data:

networks:
  backend:
    driver: bridge
    name: "pooler-net"
